(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5146],{84438:function(e,n,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/typescript-d3-axis",function(){return i(56673)}])},56673:function(e,n,i){"use strict";i.r(n),i.d(n,{default:function(){return h}});var a=i(85893);i(67294);var t=i(80153),s=i(43710),o=i(61651),c=i(3572),r=i(81122),l=i(81341);let d=(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"What is typescript and why it is awesome to use it. How are d3 functions typed."}),(0,a.jsx)("p",{children:"A few examples on how it works."})]});function h(){return(0,a.jsxs)(t.A,{title:"Dealing with d3 axis in a typescript environment",seoDescription:"How to deal with d3, axes and typescript",children:[(0,a.jsx)(s.Z,{title:"D3 axis and typescript",description:d,chartType:"lollipop"}),(0,a.jsx)("h2",{id:"Basic linear scale",children:"Most basic linear axis"}),(0,a.jsxs)("p",{children:["A graph axis is based on a scale. But what is a scale? This is how the",(0,a.jsx)("a",{href:"https://github.com/d3/d3-scale",children:"d3-scale"})," module describes it:"]}),(0,a.jsx)("blockquote",{children:"Scales are a convenient abstraction for a fundamental task in visualization: mapping a dimension of abstract data to a visual representation"}),(0,a.jsx)("p",{children:"So basically a scale is a function. You provide it with an input like the value of a data point, and it returns another value like a position in pixel."}),(0,a.jsxs)("p",{children:["Here is a very basic implementation of a scale using the"," ",(0,a.jsx)("code",{children:"scaleLinear"})," function of d3."]}),(0,a.jsx)(c.d,{code:p}),(0,a.jsx)("p",{children:"Scales are then used to build axis. Here is an example transforming the scale above in an X axis using a custom react component."}),(0,a.jsx)(r.$,{VizComponent:l.c,vizName:"AxisBasic",maxWidth:400,height:300,caption:"How to build a bottom axis and a left axis component using React, used to render a d3 scale."}),(0,a.jsx)("p",{children:"Ok, now, how to deal with this in a typescript world?"}),(0,a.jsxs)("h2",{id:"typing scaleLinear",children:[(0,a.jsx)("code",{children:"scaleLinear"})," and typescript"]}),(0,a.jsxs)("p",{children:["When we create a scale function using ",(0,a.jsx)("code",{children:"scaleLinear"}),", it is equivalent as calling the function with the 3 default generics"]})," ",(0,a.jsx)(c.d,{code:u}),(0,a.jsxs)("p",{children:["Here, the first generic is the type of the data items used for the range of scale. The second generic is the type of the data that the scale with output. You can see the explanations more in depth in the"," ",(0,a.jsx)("a",{href:"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-scale/index.d.ts#L210",children:"type definition"})," ","of the scaleLinear function."]}),(0,a.jsx)("p",{children:"Now, what happens if we want to use scaleLinear to take a numeric value and map it to a color? In this case the range is gonna be an array of string. And the output is gonna be a color too. We can type it as:"}),(0,a.jsx)(c.d,{code:x}),(0,a.jsx)("br",{}),(0,a.jsxs)("h2",{id:"typing scaleOrdinal",children:[(0,a.jsx)("code",{children:"scaleOrdinal"})," and typescript"]}),(0,a.jsxs)("p",{children:["Consider a finite number of groups. We need to assign a specific color to each group. This is called an ",(0,a.jsx)("b",{children:"ordinal"})," scale and is implemented in the d3 ",(0,a.jsx)("code",{children:"scaleOrdinal"})," function."]}),(0,a.jsxs)("p",{children:["What's needed here is thus a list of colors to use (the"," ",(0,a.jsx)("code",{children:"range"}),") and a list of group names: the ",(0,a.jsx)("code",{children:"domain"}),"."]}),(0,a.jsx)("p",{children:"To put it in a nutshell, that's how the color scale is implemented:"}),(0,a.jsx)(c.d,{code:m}),(0,a.jsxs)("p",{children:["You can see how"," ",(0,a.jsx)("a",{href:"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/d3-scale/index.d.ts#L2251",children:"scaleOrdinal type implementation"})]}),(0,a.jsx)("div",{className:"full-bleed border-t h-0 bg-gray-100 mb-3 mt-24"}),(0,a.jsx)(o.Z,{chartFamily:"general"}),(0,a.jsx)("div",{className:"mt-20"})]})}let p="\nconst xScale = d3.scaleLinear()\n  .domain([0, 10]) // data can go from 0 to 10\n  .range([0, width]); // it will result in a value that goes from 0 to width\n\n// xScale(0) -> 0\n// xScale(10) -> width\n// xScale(5) -> width / 2\n".trim(),u="\n// if you call\nconst xScale = d3.scaleLinear()\n\n// it is equivalent to\nconst xScale = d3.scaleLinear<numeric, numeric, never>()\n".trim(),x="\n// typing a color scale\nconst colorScale = d3.scaleLinear<string, string, never>()\n  .range(['blue', 'green'])\n  .domain([1, 100]);\n".trim(),m='\n// List of arbitrary colors\nconst COLORS = ["#e0ac2b", "#e85252", "#6689c6", "#9a6fb0", "#a53253"];\n\n// List of all group names\nconst allGroups = data.map((group) => group.group);\n\n// Color scale\nconst colorScale = d3.scaleOrdinal<string>()\n  .domain(allGroups)\n  .range(COLORS);\n'.trim()}},function(e){e.O(0,[2343,7754,8657,7823,8190,3710,2594,2069,9774,2888,179],function(){return e(e.s=84438)}),_N_E=e.O()}]);