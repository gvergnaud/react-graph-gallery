(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7254],{5878:function(e,t,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/network-chart",function(){return i(8031)}])},6820:function(e,t,i){"use strict";i.d(t,{Z:function(){return a}});var n=i(5893);i(7294);var r=i(8843),o=i(6438);let s=e=>{let{imgLink:t,height:i,opacity:r,children:o}=e;return(0,n.jsxs)("div",{className:"relative",children:[(0,n.jsx)("div",{style:{backgroundImage:"url("+t+")",height:i,backgroundAttachment:"fixed",opacity:r,backgroundPosition:"center",backgroundRepeat:"no-repeat",backgroundSize:"cover"}}),(0,n.jsx)("div",{className:"absolute top-0 left-0 w-full h-full",children:o})]})};function a(e){var t;let{chartId:i}=e,a=(null===(t=r.c.find(e=>e.id===i))||void 0===t?void 0:t.label)||"chart";return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{id:"inspiration",children:a+" inspiration"}),(0,n.jsxs)("p",{children:["If you're looking for inspiration to create your next"," ",(0,n.jsx)("span",{children:a}),", note that"," ",(0,n.jsx)("a",{href:"https://www.dataviz-inspiration.com",children:"dataviz-inspiration.com"})," ","showcases many examples. Definitely the best place to get ... inspiration!"]}),(0,n.jsx)("div",{className:"border mb-10",children:(0,n.jsx)(s,{height:250,imgLink:"https://github.com/holtzy/dataviz-inspiration/blob/main/public/misc/overview1.png?raw=true",opacity:.3,children:(0,n.jsx)("div",{className:"flex justify-center items-center h-full",children:(0,n.jsxs)("div",{style:{maxWidth:400},className:"flex flex-col items-center",children:[(0,n.jsxs)("p",{className:"text-center text-sm",children:[(0,n.jsx)("a",{href:"https://www.dataviz-inspiration.com",children:"dataviz-inspiration.com"})," ","showcases hundreds of stunning dataviz projects. Have a look to get some ideas on how to make your ",(0,n.jsx)("span",{children:a})," ","looks good!"]}),(0,n.jsx)(o.J,{href:"https://www.dataviz-inspiration.com",isFilled:!0,size:"md",children:"visit"})]})})})})]})}},2450:function(e,t,i){"use strict";i.d(t,{Z:function(){return a}});var n=i(5893);i(7294);var r=i(2050),o=i(9975),s=i(9942);function a(e){let{images:t}=e,i=r.F.filter(e=>t.includes(e.img)).map((e,t)=>(0,n.jsx)(o.X,{link:e.link,title:e.title,description:(0,n.jsx)("p",{children:e.description}),img:e.img,alt:e.alt},t));return(0,n.jsx)(s.E,{children:i})}},505:function(e,t,i){"use strict";i.d(t,{r:function(){return l}});var n=i(5893),r=i(1664),o=i.n(r),s=i(8843),a=i(88),d=i(3572);let l=e=>{let{chartId:t}=e,i=s.c.filter(e=>e.id===t)[0].label;return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)("h2",{id:"responsiveness",children:"Responsive "+i+" with react"}),(0,n.jsxs)("p",{children:["The component above is not responsive. It expects 2 props called"," ",(0,n.jsx)("code",{children:"width"})," and ",(0,n.jsx)("code",{children:"height"})," and will render a ",i," of those dimensions."]}),(0,n.jsxs)("p",{children:["Making the ",i," responsive requires adding a ",(0,n.jsx)("b",{children:"wrapper"})," component that gets the dimension of the parent ",(0,n.jsx)("code",{children:"div"}),", and listening to a potential dimension change. This is possible thanks to a hook called"," ",(0,n.jsx)("code",{children:"useDimensions"})," that will do the job for us."]}),(0,n.jsx)(a.U,{startOpen:!1,title:(0,n.jsxs)("span",{children:[(0,n.jsx)("code",{children:"useDimensions"}),": a hook to make your viz responsive"]}),children:(0,n.jsx)(d.d,{code:c})}),(0,n.jsxs)("p",{children:["I'm in the process of writing a complete blog post on the topic."," ",(0,n.jsx)(o(),{href:"/subscribe",children:"Subscribe to the project"})," to know when it's ready."]}),(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),(0,n.jsx)("br",{})]})},c='\nexport const useDimensions = (targetRef: React.RefObject<HTMLDivElement>) => {\n\n  const getDimensions = () => {\n    return {\n      width: targetRef.current ? targetRef.current.offsetWidth : 0,\n      height: targetRef.current ? targetRef.current.offsetHeight : 0\n    };\n  };\n\n  const [dimensions, setDimensions] = useState(getDimensions);\n\n  const handleResize = () => {\n    setDimensions(getDimensions());\n  };\n\n  useEffect(() => {\n    window.addEventListener("resize", handleResize);\n    return () => window.removeEventListener("resize", handleResize);\n  }, []);\n\n  useLayoutEffect(() => {\n    handleResize();\n  }, []);\n\n  return dimensions;\n}\n'.trim()},8893:function(e,t,i){"use strict";i.d(t,{H:function(){return r}});var n=i(5893);let r=e=>{let{text:t}=e;return(0,n.jsxs)("blockquote",{className:"mt-10 opacity-20",children:[(0,n.jsx)("b",{className:"text-reactGallery mr-4",children:"ToDo"}),t]})}},8031:function(e,t,i){"use strict";i.r(t),i.d(t,{default:function(){return z}});var n=i(5893),r=i(7294),o=i(153),s=i(9965),a=i(1651),d=i(3572),l=i(1122),c=i(6820),h=i(505),u=i(8893),p=i(2450);let x={nodes:[{id:"Myriel",group:"team1"},{id:"Anne",group:"team1"},{id:"Gabriel",group:"team1"},{id:"Mel",group:"team1"},{id:"Yan",group:"team2"},{id:"Tom",group:"team2"},{id:"Cyril",group:"team2"},{id:"Tuck",group:"team2"},{id:"Antoine",group:"team3"},{id:"Rob",group:"team3"},{id:"Napoleon",group:"team3"},{id:"Toto",group:"team4"},{id:"Tutu",group:"team4"},{id:"Titi",group:"team4"},{id:"Tata",group:"team4"},{id:"Turlututu",group:"team4"},{id:"Tita",group:"team4"}],links:[{source:"Anne",target:"Myriel",value:1},{source:"Napoleon",target:"Myriel",value:1},{source:"Gabriel",target:"Myriel",value:1},{source:"Mel",target:"Myriel",value:1},{source:"Yan",target:"Tom",value:1},{source:"Tom",target:"Cyril",value:1},{source:"Tuck",target:"Myriel",value:1},{source:"Tuck",target:"Mel",value:1},{source:"Tuck",target:"Myriel",value:1},{source:"Mel",target:"Myriel",value:1},{source:"Rob",target:"Antoine",value:1},{source:"Tata",target:"Tutu",value:1},{source:"Tata",target:"Titi",value:1},{source:"Tata",target:"Toto",value:1},{source:"Tata",target:"Tita",value:1},{source:"Tita",target:"Toto",value:1},{source:"Tita",target:"Titi",value:1},{source:"Tita",target:"Turlututu",value:1},{source:"Rob",target:"Turlututu",value:1}]};var g=i(8657);let m=(e,t,i,n,r)=>{e.clearRect(0,0,t,i),r.forEach(t=>{e.beginPath(),e.moveTo(t.source.x,t.source.y),e.lineTo(t.target.x,t.target.y),e.stroke()}),n.forEach(t=>{t.x&&t.y&&(e.beginPath(),e.moveTo(t.x+10,t.y),e.arc(t.x,t.y,10,0,2*Math.PI),e.fillStyle="#cb1dd1",e.fill())})},f=e=>{let{width:t,height:i,data:o}=e,s=o.links.map(e=>({...e})),a=o.nodes.map(e=>({...e})),d=(0,r.useRef)(null);return(0,r.useEffect)(()=>{let e=d.current,n=null==e?void 0:e.getContext("2d");n&&g.A4v(a).force("link",g.Fsl(s).id(e=>e.id)).force("collide",g.Hh().radius(10)).force("charge",g.q5i()).force("center",g.wqt(t/2,i/2)).on("tick",()=>{m(n,t,i,a,s)})},[t,i,a,s]),(0,n.jsx)("div",{children:(0,n.jsx)("canvas",{ref:d,style:{width:t,height:i},width:t,height:i})})},j=e=>{let{width:t=700,height:i=400}=e;return 0===t?null:(0,n.jsx)(f,{data:x,width:t,height:i})};var v=i(6438),w=i(1664),b=i.n(w);let y={nodes:[{id:"Myriel",group:"team1"},{id:"Anne",group:"team1"},{id:"Gabriel",group:"team1"},{id:"Mel",group:"team1"},{id:"Yan",group:"team2"},{id:"Tom",group:"team2"},{id:"Cyril",group:"team2"},{id:"Tuck",group:"team2"},{id:"Antoine",group:"team3"},{id:"Rob",group:"team3"},{id:"Napoleon",group:"team3"},{id:"Toto",group:"team4"},{id:"Tutu",group:"team4"},{id:"Titi",group:"team4"},{id:"Tata",group:"team4"},{id:"Turlututu",group:"team4"},{id:"Tita",group:"team4"}],links:[{source:"Anne",target:"Myriel",value:1},{source:"Napoleon",target:"Myriel",value:1},{source:"Gabriel",target:"Myriel",value:1},{source:"Mel",target:"Myriel",value:1},{source:"Yan",target:"Tom",value:1},{source:"Tom",target:"Cyril",value:1},{source:"Tuck",target:"Myriel",value:1},{source:"Tuck",target:"Mel",value:1},{source:"Tuck",target:"Myriel",value:1},{source:"Mel",target:"Myriel",value:1},{source:"Rob",target:"Antoine",value:1},{source:"Tata",target:"Tutu",value:1},{source:"Tata",target:"Titi",value:1},{source:"Tata",target:"Toto",value:1},{source:"Tata",target:"Tita",value:1},{source:"Tita",target:"Toto",value:1},{source:"Tita",target:"Titi",value:1},{source:"Tita",target:"Turlututu",value:1},{source:"Rob",target:"Turlututu",value:1}]},k=(e,t,i,n,r)=>{e.clearRect(0,0,t,i),r.forEach(t=>{e.beginPath(),e.moveTo(t.source.x,t.source.y),e.lineTo(t.target.x,t.target.y),e.stroke()}),n.forEach(t=>{t.x&&t.y&&(e.beginPath(),e.moveTo(t.x+10,t.y),e.arc(t.x,t.y,10,0,2*Math.PI),e.fillStyle="#cb1dd1",e.fill())})},T=e=>{let{width:t,height:i,data:o,collideRadius:s,manyBodyStrength:a,forceYStrength:d}=e,l=o.links.map(e=>({...e})),c=o.nodes.map(e=>({...e})),h=(0,r.useRef)(null);return(0,r.useEffect)(()=>{let e=h.current,n=null==e?void 0:e.getContext("2d");n&&g.A4v(c).force("link",g.Fsl(l).id(e=>e.id)).force("collide",g.Hh().radius(s).strength(1)).force("charge",g.q5i().strength(a)).force("center",g.wqt(t/2,i/2)).force("charge",g.Mrm(0).strength(d)).on("tick",()=>{k(n,t,i,c,l)})},[t,i,c,l,s,a,d]),(0,n.jsx)("div",{children:(0,n.jsx)("canvas",{ref:h,style:{width:t,height:i},width:t,height:i})})},N={color:"grey",fontSize:14},M=e=>{let{width:t=700,height:i=400}=e,[o,s]=(0,r.useState)(25),[a,d]=(0,r.useState)(0),[l,c]=(0,r.useState)(.1);return(0,n.jsxs)("div",{style:{height:i,width:t},children:[(0,n.jsxs)("div",{style:{height:120,marginLeft:0,display:"flex",flexDirection:"column",justifyContent:"center"},children:[(0,n.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[(0,n.jsx)("i",{children:(0,n.jsx)("span",{style:N,children:"Radius used to avoid collision: "+o})}),(0,n.jsx)("input",{type:"range",min:2,max:80,value:o,step:1,onChange:e=>s(Number(e.target.value)),style:{height:2,opacity:.5,marginLeft:10}})]}),(0,n.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[(0,n.jsx)("i",{children:(0,n.jsx)("span",{style:N,children:"ManyBody strength: "+a})}),(0,n.jsx)("input",{type:"range",min:-60,max:60,value:a,step:1,onChange:e=>d(Number(e.target.value)),style:{height:2,opacity:.5,marginLeft:10}})]}),(0,n.jsxs)("div",{style:{display:"flex",alignItems:"center"},children:[(0,n.jsx)("i",{children:(0,n.jsx)("span",{style:N,children:"ForceY strength: "+l})}),(0,n.jsx)("input",{type:"range",min:0,max:1,value:l,step:.1,onChange:e=>c(Number(e.target.value)),style:{height:2,opacity:.5,marginLeft:10}})]})]}),(0,n.jsx)(T,{data:y,width:t,height:i-120-50,collideRadius:o,manyBodyStrength:a,forceYStrength:l})]})},D=e=>{let{width:t=700,height:i=400}=e;return(0,n.jsx)(M,{width:t,height:i})},R=(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)("p",{children:["A ",(0,n.jsx)("a",{href:"https://www.data-to-viz.com/graph/arc.html",children:"network diagram"})," ","shows the interconnections between entities. It is consituted by"," ",(0,n.jsx)("b",{children:"nodes"})," that represent entities and by ",(0,n.jsx)("b",{children:"links"})," that show relationships between entities."]}),(0,n.jsxs)("p",{children:["This page is a step by step tutorial explaining how to build a network diagram component with ",(0,n.jsx)("code",{children:"React"})," and ",(0,n.jsx)("code",{children:"D3.js"}),". It relies on the ",(0,n.jsx)("code",{children:"d3-force"})," plugin to compute the node positions. It comes with explanations and code sandboxes. It starts by simple concepts like how to format the data and how to draw nodes and links in SVG, and then goes further with hover effect, tooltip and more."]})]});function z(){return(0,n.jsxs)(o.A,{title:"How to build a Network Diagram with React and D3.",seoDescription:"A step-by-step guide to build your very own Network diagram from scratch. Comes with explanations, code sandboxes, and ready-to-use templates.",children:[(0,n.jsx)(s.Z,{title:"Network diagram",description:R,chartType:"network"}),(0,n.jsx)("h2",{id:"data",children:"The Data"}),(0,n.jsxs)("p",{children:["Two layers of information are required to build a network diagram: a list of ",(0,n.jsx)("b",{children:"nodes"})," to build the circles and a list of ",(0,n.jsx)("b",{children:"links"})," to build the lines."]}),(0,n.jsx)("p",{children:"Many different data structures can be used to store such information. In this tutorial I suggest to start with the following:"}),(0,n.jsx)(d.d,{code:I}),(0,n.jsxs)("p",{children:[(0,n.jsx)("code",{children:"data"})," is an object with 2 properties: ",(0,n.jsx)("code",{children:"nodes"})," and"," ",(0,n.jsx)("code",{children:"links"}),"."]}),(0,n.jsxs)("ul",{children:[(0,n.jsxs)("li",{children:[(0,n.jsx)("code",{children:"nodes"})," is an array where each node is an object defined by its ",(0,n.jsx)("code",{children:"id"})," and its ",(0,n.jsx)("code",{children:"group"}),". Note that any other feature can be added to nodes here."]}),(0,n.jsxs)("li",{children:[(0,n.jsx)("code",{children:"links"})," is another array listing the connections. They are defined by a ",(0,n.jsx)("code",{children:"source"})," and a ",(0,n.jsx)("code",{children:"target"})," and optionnaly with a ",(0,n.jsx)("code",{children:"value"}),". Note that all"," ",(0,n.jsx)("code",{children:"source"})," and ",(0,n.jsx)("code",{children:"target"})," values must have a value in the ",(0,n.jsx)("code",{children:"nodes"})," array."]})]}),(0,n.jsx)(u.H,{text:"Explain how to build this data structure from various initial formats"}),(0,n.jsx)("h2",{id:"skeleton",children:"Component skeleton"}),(0,n.jsxs)("p",{children:["The goal here is to create a ",(0,n.jsx)("code",{children:"NetworkDiagram"})," component that will be stored in a ",(0,n.jsx)("code",{children:"NetworkDiagram.tsx"})," file. This component requires 3 props to render: a ",(0,n.jsx)("code",{children:"width"}),", a ",(0,n.jsx)("code",{children:"height"})," ","and some ",(0,n.jsx)("code",{children:"data"}),"."]}),(0,n.jsxs)("p",{children:["The shape of the ",(0,n.jsx)("code",{children:"data"})," is described above. The"," ",(0,n.jsx)("code",{children:"width"})," and ",(0,n.jsx)("code",{children:"height"})," will be used to render an"," ",(0,n.jsx)("code",{children:"svg"})," element in the DOM, in which we will insert the arc diagram."]}),(0,n.jsxs)("p",{children:["To put it in a nutshell, that's the skeleton of our"," ",(0,n.jsx)("code",{children:"NetworkDiagram"})," component:"]}),(0,n.jsx)(d.d,{code:A}),(0,n.jsxs)("p",{children:["It's fundamental to understand that with this code organization, d3.js will be used to prepare the SVG ",(0,n.jsx)("code",{children:"circle"})," and"," ",(0,n.jsx)("code",{children:"lines"}),", but it's React that will render them in the"," ",(0,n.jsx)("code",{children:"return()"})," statement. We won't use d3 methods like"," ",(0,n.jsx)("code",{children:"append"})," that you can find in usual"," ",(0,n.jsx)("a",{href:"https://www.d3-graph-gallery.com",children:"d3.js examples"}),"."]}),(0,n.jsxs)("h2",{id:"d3-force",children:["Compute node positions with ",(0,n.jsx)("code",{children:"d3-force"})]}),(0,n.jsxs)("p",{children:["The hardest part of a network diagram construction is to"," ",(0,n.jsx)("b",{children:"compute the node positions"}),". Fortunately, the"," ",(0,n.jsx)("a",{href:"https://github.com/d3/d3-force",children:"d3-force"})," plugin allows to simulate ",(0,n.jsx)("b",{children:"physical forces"})," on our nodes to find insightful layouts."]}),(0,n.jsx)(v.J,{href:"https://github.com/d3/d3-force",size:"sm",isFilled:!0,children:"d3-force doc"}),(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),(0,n.jsxs)("p",{children:["Everything is done thanks to the ",(0,n.jsx)("code",{children:"forceSimulation()"})," ","function. This function expects an array of nodes as described in the"," ",(0,n.jsx)(b(),{href:"#data",children:"data section"})," above."]}),(0,n.jsxs)("p",{children:["it also expects a list of ",(0,n.jsx)("b",{children:"forces"})," to apply to the nodes. Many kind of physical forces are offered and will be described more in depth later in this post."]}),(0,n.jsxs)("p",{children:["To put it in a nutshell, here is an example of a call to the",(0,n.jsx)("code",{children:"forceSimulation"})," function"]}),(0,n.jsx)(d.d,{code:S}),(0,n.jsxs)("p",{children:["This function is going to run a ",(0,n.jsx)("b",{children:"simulation"}),". It is a basically a"," ",(0,n.jsx)("b",{children:"loop"}),". At each iteration the function tries to improve the node positions until it is satisfied by the result."]}),(0,n.jsxs)("p",{children:["The input we provide to the function (the array of nodes) is progressively ",(0,n.jsx)("b",{children:"mutated"}),". Some very useful properties are added to it! ",(0,n.jsx)("code",{children:"x"})," and ",(0,n.jsx)("code",{children:"y"})," for instance are now providing the node position on the 2d coordinate system \uD83C\uDF89."]}),(0,n.jsxs)("p",{children:["This is how ",(0,n.jsx)("code",{children:"nodes"})," is now looking like:"]}),(0,n.jsx)(d.d,{code:C}),(0,n.jsxs)("p",{children:["Note that pretty much the same thing happens to the"," ",(0,n.jsx)("b",{children:"array of links"}),". The array is mutated, now providing the source and target coordinates too."," "]}),(0,n.jsx)("p",{children:"This is it! Now it is just a matter of drawing those nodes and links with the available coordinates. \uD83D\uDD25"}),(0,n.jsx)("h2",{id:"rendering",children:"Render nodes and links using canvas"}),(0,n.jsxs)("p",{children:["Rendering a network diagram is ",(0,n.jsx)("b",{children:"a bit more tricky"})," than many other chart types described in this gallery:"]}),(0,n.jsx)("h3",{children:"→ Simulation takes time"}),(0,n.jsxs)("p",{children:["Running the simulations with ",(0,n.jsx)("code",{children:"forceSimulation()"})," to get the node positions ",(0,n.jsx)("b",{children:"takes time"}),". Even with a small dataset like below it takes a few seconds. Since we do not want to leave the graph area empty for such a long period of time, a common workaround is to"," ",(0,n.jsx)("b",{children:"update"})," the node positions ",(0,n.jsx)("b",{children:"at each iteration"})," of the simulation."]}),(0,n.jsxs)("p",{children:["Fortunately this is possible using the ",(0,n.jsx)("code",{children:"on('tick', ...)"})," ","method of ",(0,n.jsx)("code",{children:"forceSimulation()"}),". Using the code below I can call a hand-made function called ",(0,n.jsx)("code",{children:"drawNetwork"})," that will render the graph at each iteration."]}),(0,n.jsx)(d.d,{code:E}),(0,n.jsxs)("p",{children:["Note that the simulation is run in a ",(0,n.jsx)("code",{children:"useEffect"})," hook. It allows to first initialize the graph area in the DOM, and then render the content into it."]}),(0,n.jsx)("h3",{children:"→ Performance is key"}),(0,n.jsxs)("p",{children:["The number of items to draw in the network diagram is often ",(0,n.jsx)("b",{children:"big"}),". And we need to render it ",(0,n.jsx)("b",{children:"many times"}),", at each iteration of the simulation. Adding that many SVG elements to the DOM could be very bad in term of performance."]}),(0,n.jsxs)("p",{children:["This is why I strongly advise to use a ",(0,n.jsx)("code",{children:"canvas"})," element to render the shapes. The ",(0,n.jsx)("code",{children:"drawNetwork()"})," function could look as something like this:"]}),(0,n.jsx)(d.d,{code:F}),(0,n.jsxs)("p",{children:["Using canvas instead of SVG is a very important concept when preformance needs to be improved in a data visualization. I am preparing a full post on the topic so feel free to ",(0,n.jsx)(b(),{href:"/subscribe",children:"subscribe"})," to the project to know when it is ready!"]}),(0,n.jsx)(v.J,{isFilled:!0,size:"sm",href:"/subscribe",children:"More about Canvas"}),(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),(0,n.jsx)("br",{}),(0,n.jsx)("p",{children:"Here is a code sandbox putting all of this into action. It results in a first simple network diagram. Refresh the page to see the simulation running and the node slowly reaching their final positons."}),(0,n.jsx)(l.$,{VizComponent:j,vizName:"NetworkDiagramBasicCanvas",maxWidth:700,height:500,caption:"A first network diagram built using react and d3-force."}),(0,n.jsx)(h.r,{chartId:"network"}),(0,n.jsx)(c.Z,{chartId:"network"}),(0,n.jsx)("h2",{id:"forces",children:"Available forces"}),(0,n.jsxs)("p",{children:["The exausthive list of forces that can be applied to nodes is available in the"," ",(0,n.jsx)("a",{href:"https://github.com/d3/d3-force#forces",children:"official documentation"}),". Here is an overview of the main ones:"]}),(0,n.jsxs)("ul",{children:[(0,n.jsxs)("li",{children:[(0,n.jsx)("code",{children:"d3.forceManyBody()"})," → simulates ",(0,n.jsx)("b",{children:"attraction"})," ","between nodes if its strength is positive, ",(0,n.jsx)("b",{children:"repulsion"})," otherwise."]}),(0,n.jsx)("br",{}),(0,n.jsxs)("li",{children:[(0,n.jsx)("code",{children:"d3.forceCenter()"})," → translates nodes uniformly so that the mean position of all nodes is at a given position."]})," ",(0,n.jsx)("br",{}),(0,n.jsxs)("li",{children:[(0,n.jsx)("code",{children:"d3.forceCollide()"})," → tries to avoid node collision and overlap. You can provide a ",(0,n.jsx)("code",{children:"radius"})," and a"," ",(0,n.jsx)("code",{children:"strength"}),"."]})," ",(0,n.jsx)("br",{}),(0,n.jsxs)("li",{children:[(0,n.jsx)("code",{children:"d3.forceLink()"})," → pushes linked nodes together or apart according to the desired link distance."]})," ",(0,n.jsx)("br",{}),(0,n.jsxs)("li",{children:[(0,n.jsx)("code",{children:"d3.forceX()"})," → applies a force toward a X position to all nodes. ",(0,n.jsx)("code",{children:"d3.forceY()"})," is also available."]})]}),(0,n.jsx)(l.$,{VizComponent:D,vizName:"NetworkDiagramAvailableForces",maxWidth:1e3,height:700,caption:"A first network diagram built using react and d3-force."}),(0,n.jsx)("h2",{id:"variations",children:"Variations"}),(0,n.jsxs)("p",{children:["Once you've understood how to build a basic network diagram with d3 and react, it opens an infinite world of ",(0,n.jsx)("b",{children:"customization"}),". Here are a few examples using the same concepts."]}),(0,n.jsx)("p",{children:"Click on the overview below to get details and code."}),(0,n.jsx)("br",{}),(0,n.jsx)(p.Z,{images:["network-les-miserables.png","vertical-arc-diagram.png","circle-pack-d3-force.png"]}),(0,n.jsx)("div",{className:"full-bleed border-t h-0 bg-gray-100 mb-3 mt-24"}),(0,n.jsx)(a.Z,{chartFamily:"flow"}),(0,n.jsx)("div",{className:"mt-20"})]})}let I='\nexport const data = {\n  nodes: [\n      { id: "Myriel", group: \'team1\' },\n      { id: "Anne", group: \'team1\' },\n      ...\n  ],\n  links: [\n      { source: "Anne", target: "Myriel", value: 1 },\n      { source: "Napoleon", target: "Myriel", value: 1 },\n      ...\n  ]\n}\n'.trim(),A='\nimport * as d3 from "d3"; // we will need d3.js\n\ntype NetworkDiagramProps = {\n  width: number;\n  height: number;\n  data: number[];\n};\n\nexport const NetworkDiagram = ({ width, height, data }: NetworkDiagramProps) => {\n\n  // read the data\n  // compute the nodes position using a d3-force\n  // build the links\n  // build the nodes\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        // render all the lines and circles\n      </svg>\n    </div>\n  );\n};\n'.trim(),S="\nd3.forceSimulation(nodes) // apply the simulation to our array of nodes\n\n  // Force #1: links between nodes\n  .force( 'link', d3.forceLink(links).id((d) => d.id))\n\n  // Force #2: avoid node overlaps\n  .force('collide', d3.forceCollide().radius(RADIUS))\n\n  // Force #3: attraction or repulsion between nodes\n  .force('charge', d3.forceManyBody())\n\n  // Force #4: nodes are attracted by the center of the chart area\n  .force('center', d3.forceCenter(width / 2, height / 2));\n".trim(),C="\n// Mutated nodes once the simulation has been run\n[\n  { id: \"Myriel\", group: 'team1', x: 200, y: 34.5, index: 0, ... },\n  { id: \"Anne\", group: 'team1', x: 100, y: 53.2, index: 1, ... },\n  ...\n],\n".trim(),E="\n.on('tick', () => {\n  drawNetwork(context, width, height, nodes, links);\n});\n".trim(),F="\nexport const RADIUS = 10;\n\nexport const drawNetwork = (context, width, height, nodes, links,) => {\n  context.clearRect(0, 0, width, height);\n\n  // Draw the links first\n  links.forEach((link) => {\n    context.beginPath();\n    context.moveTo(link.source.x, link.source.y);\n    context.lineTo(link.target.x, link.target.y);\n    context.stroke();\n  });\n\n  // Draw the nodes\n  nodes.forEach((node) => {\n    context.beginPath();\n    context.moveTo(node.x + RADIUS, node.y);\n    context.arc(node.x, node.y, RADIUS, 0, 2 * Math.PI);\n    context.fillStyle = '#cb1dd1';\n    context.fill();\n  });\n};\n".trim()}},function(e){e.O(0,[3996,8657,3213,645,298,693,9774,2888,179],function(){return e(e.s=5878)}),_N_E=e.O()}]);