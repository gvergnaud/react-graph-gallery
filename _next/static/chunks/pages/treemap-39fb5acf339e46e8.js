(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[3212],{8990:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/treemap",function(){return t(5525)}])},5525:function(e,a,t){"use strict";t.r(a),t.d(a,{default:function(){return k}});var r=t(5893),i=t(7294),n=t(153),s=t(9965),l=t(1651),h=t(3572),o=t(1122);let c={type:"node",name:"boss",value:0,children:[{type:"leaf",name:"Mark",value:90},{type:"leaf",name:"Robert",value:12},{type:"leaf",name:"Emily",value:34},{type:"leaf",name:"Marion",value:53},{type:"leaf",name:"Nicolas",value:98},{type:"leaf",name:"Malki",value:22},{type:"leaf",name:"Dj\xe9",value:12},{type:"leaf",name:"M\xe9lanie",value:45},{type:"leaf",name:"Einstein",value:76}]};var d=t(8657);let m=e=>{let{width:a,height:t,data:n}=e,s=(0,i.useMemo)(()=>d.bT9(n).sum(e=>e.value),[n]),l=(0,i.useMemo)(()=>{let e=d.pNI().size([a,t]).padding(4);return e(s)},[s,a,t]),h=l.leaves().map(e=>(0,r.jsxs)("g",{children:[(0,r.jsx)("rect",{x:e.x0,y:e.y0,width:e.x1-e.x0,height:e.y1-e.y0,stroke:"transparent",fill:"#69b3a2",className:"opacity-80 hover:opacity-100"}),(0,r.jsx)("text",{x:e.x0+3,y:e.y0+3,fontSize:12,textAnchor:"start",alignmentBaseline:"hanging",fill:"white",className:"font-bold",children:e.data.name}),(0,r.jsx)("text",{x:e.x0+3,y:e.y0+18,fontSize:12,textAnchor:"start",alignmentBaseline:"hanging",fill:"white",className:"font-light",children:e.data.value})]},e.id));return(0,r.jsx)("div",{children:(0,r.jsx)("svg",{width:a,height:t,children:h})})},p=e=>{let{width:a=700,height:t=400}=e;return(0,r.jsx)(m,{data:c,width:a,height:t})},u={type:"node",name:"boss",value:0,children:[{type:"node",name:"Team Dataviz",value:0,children:[{type:"leaf",name:"Mark",value:90},{type:"leaf",name:"Robert",value:12},{type:"leaf",name:"Emily",value:34},{type:"leaf",name:"Marion",value:53}]},{type:"node",name:"Team DevOps",value:0,children:[{type:"leaf",name:"Nicolas",value:98},{type:"leaf",name:"Malki",value:22},{type:"leaf",name:"Dj\xe9",value:12}]},{type:"node",name:"Team Sales",value:0,children:[{type:"leaf",name:"M\xe9lanie",value:45},{type:"leaf",name:"Einstein",value:76}]}]},x=["#e0ac2b","#6689c6","#a4c969","#e85252","#9a6fb0","#a53253","#7f7f7f"],j=e=>{let{width:a,height:t,data:n}=e,s=(0,i.useMemo)(()=>d.bT9(n).sum(e=>e.value),[n]),l=null==s?void 0:null===(h=s.children)||void 0===h?void 0:h.map(e=>e.data.name);var h,o=d.PKp().domain(l||[]).range(x);let c=(0,i.useMemo)(()=>{let e=d.pNI().size([a,t]).padding(4);return e(s)},[s,a,t]),m=c.leaves().map((e,a)=>{var t;let i=null===(t=e.parent)||void 0===t?void 0:t.data.name;return(0,r.jsxs)("g",{children:[(0,r.jsx)("rect",{x:e.x0,y:e.y0,width:e.x1-e.x0,height:e.y1-e.y0,stroke:"transparent",fill:o(i),className:"opacity-80 hover:opacity-100"}),(0,r.jsx)("text",{x:e.x0+3,y:e.y0+3,fontSize:12,textAnchor:"start",alignmentBaseline:"hanging",fill:"white",className:"font-bold",children:e.data.name}),(0,r.jsx)("text",{x:e.x0+3,y:e.y0+18,fontSize:12,textAnchor:"start",alignmentBaseline:"hanging",fill:"white",className:"font-light",children:e.data.value})]},e.id)});return(0,r.jsx)("div",{children:(0,r.jsx)("svg",{width:a,height:t,children:m})})},f=e=>{let{width:a=700,height:t=400}=e;return(0,r.jsx)(j,{data:u,width:a,height:t})};var y=t(390),v=t(1664),g=t.n(v),b=t(6438);let w=(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)("p",{children:["A ",(0,r.jsx)("a",{href:"https://www.data-to-viz.com/graph/treemap.html",children:"treemap"})," ","displays a hierarchical dataset (a ",(0,r.jsx)("i",{children:"tree"}),") as a set of"," ",(0,r.jsx)("b",{children:"rectangles"}),". Rectangle sizes are proportional to their numeric value."]}),(0,r.jsxs)("p",{children:[(0,r.jsx)("code",{children:"d3.js"})," has some handy functions to compute the rectangle positions. ",(0,r.jsx)("code",{children:"React"})," becomes useful to render those rectangles, animate transitions and more. This post explains how to make those 2 tools work together to build a ",(0,r.jsx)("code",{children:"Treemap"})," component."]})]});function k(){return(0,r.jsxs)(n.A,{title:"Treemap with React",seoDescription:"How to build a treemap with React and D3.js. A set of re-usable components",children:[(0,r.jsx)(s.Z,{title:"Treemap",description:w,chartType:"treemap"}),(0,r.jsx)("h2",{id:"data",children:"The Data"})," ",(0,r.jsxs)("p",{children:["The dataset describes a ",(0,r.jsx)("b",{children:"hierarchy"})," using a ",(0,r.jsx)("b",{children:"recursive"})," ","structure. Each item in this structure is called a ",(0,r.jsx)("b",{children:"node"}),", the lowest nodes of the hierarchy being called ",(0,r.jsx)("b",{children:"leaves"}),"."]}),(0,r.jsxs)("p",{children:["The dataset is an ",(0,r.jsx)("b",{children:"object"})," that has at least 3 properties:"," ",(0,r.jsx)("code",{children:"name"}),", ",(0,r.jsx)("code",{children:"value"})," and ",(0,r.jsx)("code",{children:"children"}),".",(0,r.jsx)("code",{children:"children"})," is an array of nodes that have this structure too."]}),(0,r.jsx)("br",{}),(0,r.jsx)("p",{children:"Here is a minimal example of the data structure:"}),(0,r.jsx)(h.d,{code:T}),(0,r.jsxs)("p",{children:["It's very likely that your dataset is not formatted as above ",(0,r.jsx)("b",{children:"yet"}),". But don't fret, the next section will teach you how to ",(0,r.jsx)("b",{children:"convert"})," ","it. ⬇️"]})," ",(0,r.jsx)("div",{className:"bg-gray-50 full-bleed mt-12",children:(0,r.jsxs)("div",{className:"wrapper pb-20",children:[(0,r.jsx)("h2",{id:"reformat data",children:"Data wrangling"})," ",(0,r.jsxs)("p",{children:[(0,r.jsx)("b",{children:"Three main input data formats"})," are usually encountered when it comes to store hierarchical information. It's always a struggle to deal with those various formats:"]}),(0,r.jsx)("p",{children:"→ list of connection (csv)"}),(0,r.jsx)("p",{children:"→ list of connection (js object)"}),(0,r.jsx)("p",{children:"→ json with hierarchy"}),(0,r.jsxs)("p",{children:["I described in depth how to deal with those format in the"," ",(0,r.jsx)(g(),{href:"/dendrogram",children:"dendrogram section"})," of the gallery that shares the same kind of input format. Please take a look there!"]}),(0,r.jsx)(b.J,{isFilled:!0,size:"sm",href:"/dendrogram#hierarchy",children:"Read more"})]})}),(0,r.jsx)("h2",{id:"hierarchy()",children:'The hierarchy format or "root node"'}),(0,r.jsxs)("p",{children:["A treemap is a ",(0,r.jsx)("b",{children:"hierarchical layout"}),". D3.js has a lot of"," ",(0,r.jsx)("a",{href:"https://github.com/d3/d3-hierarchy",children:"utility functions"})," ","allowing to deal with this kind of hierarchical data. To use those functions we first need to create a ",(0,r.jsx)("b",{children:'"Root node"'})," or"," ",(0,r.jsx)("b",{children:'"Hierarchy"'}),"."]}),(0,r.jsxs)("p",{children:["But ",(0,r.jsx)("i",{children:"what the heck is this"}),"? \uD83E\uDD14"]}),(0,r.jsxs)("p",{children:['A "root node" or "hierarchy" is a ',(0,r.jsx)("b",{children:"javascript object"}),". It has almost the same shape as the input data described above. But with some additional properties and methods that will make our life easier."]}),(0,r.jsx)("h3",{children:"→ how to build a root node"}),(0,r.jsxs)("p",{children:["If your dealing with the format describe in the previous section, you just have to pass it to the d3 ",(0,r.jsx)("code",{children:"hierarchy"})," function:"]}),(0,r.jsx)(h.d,{code:N}),(0,r.jsxs)("p",{children:["Note that this concept of ",(0,r.jsx)("b",{children:"root node"})," is ",(0,r.jsx)("b",{children:"key"})," for all the charts representing a hierarchy like"," ",(0,r.jsx)(g(),{href:"/dendrogram",children:"dendrograms"}),","," ",(0,r.jsx)(g(),{href:"/circular-packing",children:"circle packing"}),","," ",(0,r.jsx)(g(),{href:"/network-chart",children:"networks"})," and more. Please check the dendrogram page where I explain it in detail."]}),(0,r.jsx)(b.J,{isFilled:!0,size:"sm",href:"/dendrogram#hierarchy",children:"Read more"}),(0,r.jsxs)("h2",{id:"treemap()",children:["Compute rectangle positions with ",(0,r.jsx)("code",{children:"d3.treemap()"})]}),(0,r.jsxs)("p",{children:["From the ",(0,r.jsx)("code",{children:"hierarchy"})," object computed above we need to compute the position of every rectangles of the treemap."]}),(0,r.jsxs)("p",{children:["This is possible thanks to the ",(0,r.jsx)("code",{children:"treemap()"})," function of d3.js that can be invoked like this:"]}),(0,r.jsx)(h.d,{code:z}),(0,r.jsxs)("p",{children:["The result is an object that has almost the same shape as the initial"," ",(0,r.jsx)("code",{children:"hierarchy"})," object. But for each node, an additional"," ",(0,r.jsx)("code",{children:"x0"}),", ",(0,r.jsx)("code",{children:"x1"}),", ",(0,r.jsx)("code",{children:"y0"})," and ",(0,r.jsx)("code",{children:"y1"})," ","are available. Those are the coordinates of the rectangle in our SVG space! \uD83D\uDD25"]}),(0,r.jsx)("h2",{id:"1 level",children:"Treemap with 1️⃣ level of hierarchy"}),(0,r.jsxs)("p",{children:["With the coordinates of each rectangle being available, it is just a matter of ",(0,r.jsx)("b",{children:"looping"})," through all of them and drawing them using SVG."]}),(0,r.jsxs)("p",{children:["The ",(0,r.jsx)("code",{children:"leaves()"})," method is usefull to list all leaves, allowing to make the loop easily:"]}),(0,r.jsx)(h.d,{code:D}),(0,r.jsx)("p",{children:"This results in a first basic treemap \uD83D\uDE0B"}),(0,r.jsx)(o.$,{vizName:"TreemapBasic",VizComponent:p,maxWidth:600,height:400,caption:"The most basic treemap with 1 level of hierarchy made with react and d3.js."}),(0,r.jsx)("h2",{id:"2 levels",children:"Treemap with 2️⃣ levels of hierarchy"}),(0,r.jsxs)("p",{children:["Treemaps are also handy to display ",(0,r.jsx)("b",{children:"nested data structure"}),". For instance, let's consider a company with a CEO, several teams, and a few employees per team. This result in a structure with"," ",(0,r.jsx)("b",{children:"several levels"})," of hierarchy."]}),(0,r.jsxs)("p",{children:["Pretty much the same strategy is used to draw the treemap. But note that each leaf has a ",(0,r.jsx)("code",{children:"parent"})," property that is very handy to use a"," ",(0,r.jsx)("b",{children:"categorical color scale"})," to the graph."]}),(0,r.jsx)(h.d,{code:E}),(0,r.jsx)(o.$,{vizName:"Treemap2Levels",VizComponent:f,maxWidth:600,height:400,caption:"Treemap with 2 levels of hierarchy and a color scale, made with react and d3.js."}),(0,r.jsx)("h2",{id:"hover effect",children:"Hover effect"}),(0,r.jsxs)("p",{children:["Adding a ",(0,r.jsx)("b",{children:"hover effect"})," to your treemap is a nice polish detail. Here I suggest to highlight the slice that is hovered over by"," ",(0,r.jsx)("b",{children:"dimming"})," all the other slices."]}),(0,r.jsxs)("p",{children:["There are several strategies available to implement such an effect. One can rely on css ",(0,r.jsx)("b",{children:"pseudo classes"})," only, or ",(0,r.jsx)("b",{children:"add a css class"})," ","using javascript and the ",(0,r.jsx)("code",{children:"onMouseEnter"})," event. It's also possible to rely on an ",(0,r.jsx)("b",{children:"animation library"})," like"," ",(0,r.jsx)("code",{children:"react-spring"}),"."]}),(0,r.jsxs)("p",{children:["I'm preparing a full section on the topic. You can subscribe to my"," ",(0,r.jsx)(g(),{href:"/subscribe",children:"dataviz-universe newsletter"})," to know when it will be ready. Meanwhile, there is a code sandbox waiting for you below to reveal the code of this example."]}),(0,r.jsx)(b.J,{isFilled:!0,size:"sm",href:"/subscribe",children:"Subscribe"}),(0,r.jsx)(o.$,{vizName:"TreemapHoverEffect",VizComponent:y.C,maxWidth:600,height:400,caption:"Hover over a group on the treemap to see the other groups fading."}),(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),(0,r.jsx)("div",{className:"full-bleed border-t h-0 bg-gray-100 my-3"}),(0,r.jsx)(l.Z,{chartFamily:"partOfAWhole"}),(0,r.jsx)("div",{className:"mt-20"})]})}let T="\nconst data = {\n  type: 'node',\n  name: \"boss\",\n  value: 2300,\n  children: [\n    {type: 'leaf', name:\"Mark\", value: 90},\n    {type: 'leaf', name:\"Robert\", value: 12},\n    {type: 'leaf', name:\"Emily\", value: 34},\n    ...\n}\n".trim(),N="\nconst hierarchy =  d3.hierarchy(data)\n".trim(),z="\nconst treeGenerator = d3.treemap()\n  .size([width, height])\n  .padding(4); // space between rectangles\n\n// Use the generator on the hierarchy object built in previous section\nconst treeLayout =  treeGenerator(hierarchy);\n".trim(),D="\nconst rects = treeLayout.leaves().map((leaf) => {\n  return (\n    <g key={leaf.id}>\n      <rect\n        x={leaf.x0}\n        y={leaf.y0}\n        width={leaf.x1 - leaf.x0}\n        height={leaf.y1 - leaf.y0}\n      />\n    </g>\n  )\n}\n".trim(),E="\n// Create a color scale\nconst firstLevelGroups = hierarchy?.children?.map((child) => child.data.name);\nvar colorScale = d3\n  .scaleOrdinal()\n  .domain(firstLevelGroups)\n  .range(['red', 'green', 'blue', ...]);\n\n// Then In the loop through each leaves:\ntreeLayout.leaves().map((leaf) => {\n  const parentName = leaf.parent?.data.name;\n  const color = colorScale(parentName)\n\n  // ... render rect using this color\n}\n".trim()}},function(e){e.O(0,[1664,8657,2718,645,8548,9774,2888,179],function(){return e(e.s=8990)}),_N_E=e.O()}]);