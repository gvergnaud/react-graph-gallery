(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8078],{8930:function(t,e,i){(window.__NEXT_P=window.__NEXT_P||[]).push(["/arc-diagram",function(){return i(7626)}])},6820:function(t,e,i){"use strict";i.d(e,{Z:function(){return s}});var a=i(5893);i(7294);var n=i(8843),o=i(6438);let r=t=>{let{imgLink:e,height:i,opacity:n,children:o}=t;return(0,a.jsxs)("div",{className:"relative",children:[(0,a.jsx)("div",{style:{backgroundImage:"url("+e+")",height:i,backgroundAttachment:"fixed",opacity:n,backgroundPosition:"center",backgroundRepeat:"no-repeat",backgroundSize:"cover"}}),(0,a.jsx)("div",{className:"absolute top-0 left-0 w-full h-full",children:o})]})};function s(t){var e;let{chartId:i}=t,s=(null===(e=n.c.find(t=>t.id===i))||void 0===e?void 0:e.label)||"chart";return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h2",{id:"inspiration",children:s+" inspiration"}),(0,a.jsxs)("p",{children:["If you're looking for inspiration to create your next"," ",(0,a.jsx)("span",{children:s}),", note that"," ",(0,a.jsx)("a",{href:"https://www.dataviz-inspiration.com",children:"dataviz-inspiration.com"})," ","showcases many examples. Definitely the best place to get ... inspiration!"]}),(0,a.jsx)("div",{className:"border mb-10",children:(0,a.jsx)(r,{height:250,imgLink:"https://github.com/holtzy/dataviz-inspiration/blob/main/public/misc/overview1.png?raw=true",opacity:.3,children:(0,a.jsx)("div",{className:"flex justify-center items-center h-full",children:(0,a.jsxs)("div",{style:{maxWidth:400},className:"flex flex-col items-center",children:[(0,a.jsxs)("p",{className:"text-center text-sm",children:[(0,a.jsx)("a",{href:"https://www.dataviz-inspiration.com",children:"dataviz-inspiration.com"})," ","showcases hundreds of stunning dataviz projects. Have a look to get some ideas on how to make your ",(0,a.jsx)("span",{children:s})," ","looks good!"]}),(0,a.jsx)(o.J,{href:"https://www.dataviz-inspiration.com",isFilled:!0,size:"md",children:"visit"})]})})})})]})}},2450:function(t,e,i){"use strict";i.d(e,{Z:function(){return s}});var a=i(5893);i(7294);var n=i(2050),o=i(9975),r=i(9942);function s(t){let{images:e}=t,i=n.F.filter(t=>e.includes(t.img)).map((t,e)=>(0,a.jsx)(o.X,{link:t.link,title:t.title,description:(0,a.jsx)("p",{children:t.description}),img:t.img,alt:t.alt},e));return(0,a.jsx)(r.E,{children:i})}},505:function(t,e,i){"use strict";i.d(e,{r:function(){return c}});var a=i(5893),n=i(1664),o=i.n(n),r=i(8843),s=i(88),l=i(3572);let c=t=>{let{chartId:e}=t,i=r.c.filter(t=>t.id===e)[0].label;return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h2",{id:"responsiveness",children:"Responsive "+i+" with react"}),(0,a.jsxs)("p",{children:["The component above is not responsive. It expects 2 props called"," ",(0,a.jsx)("code",{children:"width"})," and ",(0,a.jsx)("code",{children:"height"})," and will render a ",i," of those dimensions."]}),(0,a.jsxs)("p",{children:["Making the ",i," responsive requires adding a ",(0,a.jsx)("b",{children:"wrapper"})," component that gets the dimension of the parent ",(0,a.jsx)("code",{children:"div"}),", and listening to a potential dimension change. This is possible thanks to a hook called"," ",(0,a.jsx)("code",{children:"useDimensions"})," that will do the job for us."]}),(0,a.jsx)(s.U,{startOpen:!1,title:(0,a.jsxs)("span",{children:[(0,a.jsx)("code",{children:"useDimensions"}),": a hook to make your viz responsive"]}),children:(0,a.jsx)(l.d,{code:d})}),(0,a.jsxs)("p",{children:["I'm in the process of writing a complete blog post on the topic."," ",(0,a.jsx)(o(),{href:"/subscribe",children:"Subscribe to the project"})," to know when it's ready."]}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{})]})},d='\nexport const useDimensions = (targetRef: React.RefObject<HTMLDivElement>) => {\n\n  const getDimensions = () => {\n    return {\n      width: targetRef.current ? targetRef.current.offsetWidth : 0,\n      height: targetRef.current ? targetRef.current.offsetHeight : 0\n    };\n  };\n\n  const [dimensions, setDimensions] = useState(getDimensions);\n\n  const handleResize = () => {\n    setDimensions(getDimensions());\n  };\n\n  useEffect(() => {\n    window.addEventListener("resize", handleResize);\n    return () => window.removeEventListener("resize", handleResize);\n  }, []);\n\n  useLayoutEffect(() => {\n    handleResize();\n  }, []);\n\n  return dimensions;\n}\n'.trim()},9975:function(t,e,i){"use strict";i.d(e,{X:function(){return r}});var a=i(5893),n=i(6395),o=i.n(n);let r=t=>{let{img:e,title:i,description:n,link:r,alt:s}=t;return(0,a.jsxs)("figure",{className:o().container,children:[(0,a.jsx)("img",{src:"/chart/"+e,className:o().image,alt:s}),(0,a.jsxs)("figcaption",{children:[(0,a.jsx)("p",{className:o().title,children:(0,a.jsx)("b",{children:i})}),(0,a.jsx)("div",{className:"font-light",children:n}),(0,a.jsx)("a",{href:r})]})]})}},9942:function(t,e,i){"use strict";i.d(e,{E:function(){return n}});var a=i(5893);i(7294);let n=t=>{let{children:e}=t;return(0,a.jsx)("div",{className:"grid grid-cols-2 sm:grid-cols-3 gap-4",children:e})}},8893:function(t,e,i){"use strict";i.d(e,{H:function(){return n}});var a=i(5893);let n=t=>{let{text:e}=t;return(0,a.jsxs)("blockquote",{className:"mt-10 opacity-20",children:[(0,a.jsx)("b",{className:"text-reactGallery mr-4",children:"ToDo"}),e]})}},7626:function(t,e,i){"use strict";i.r(e),i.d(e,{default:function(){return P}});var a=i(5893);i(7294);var n=i(153),o=i(9965),r=i(7262),s=i(3572),l=i(1122),c=i(6820),d=i(505),h=i(8893);let p={nodes:[{id:"Myriel",group:"team1"},{id:"Anne",group:"team1"},{id:"Gabriel",group:"team1"},{id:"Mel",group:"team1"},{id:"Yan",group:"team2"},{id:"Tom",group:"team2"},{id:"Cyril",group:"team2"},{id:"Tuck",group:"team2"},{id:"Antoine",group:"team3"},{id:"Rob",group:"team3"}],links:[{source:"Anne",target:"Myriel",value:1},{source:"Napoleon",target:"Myriel",value:1},{source:"Gabriel",target:"Myriel",value:1},{source:"Mel",target:"Myriel",value:1},{source:"Yan",target:"Tom",value:1},{source:"Tom",target:"Cyril",value:1},{source:"Tuck",target:"Myriel",value:1},{source:"Tuck",target:"Mel",value:1},{source:"Tuck",target:"Myriel",value:1},{source:"Mel",target:"Myriel",value:1},{source:"Rob",target:"Antoine",value:1}]};var g=i(7875);let u=["#e0ac2b","#e85252","#6689c6","#9a6fb0","#a53253"],m={top:10,right:30,bottom:50,left:30},f=t=>{let{width:e,height:i,data:n}=t,o=e-m.right-m.left,r=i-m.top-m.bottom,s=n.nodes.map(t=>t.id),l=[...new Set(n.nodes.map(t=>t.group))],c=g.q2y().range([0,o]).domain(s),d=g.PKp().domain(l).range(u),h=n.nodes.map(t=>(0,a.jsx)("circle",{cx:c(t.id),cy:r,r:8,fill:d(t.group)},t.id)),p=n.links.map((t,e)=>{let i=c(t.source),n=c(t.target);if(void 0!==i&&void 0!==n)return(0,a.jsx)("path",{d:b(i,r,n,r),stroke:"black",fill:"none"},e)});return(0,a.jsx)("div",{children:(0,a.jsx)("svg",{width:e,height:i,children:(0,a.jsxs)("g",{width:o,height:r,transform:"translate(".concat([m.left,m.top].join(","),")"),children:[h,p]})})})},b=(t,e,i,a)=>["M",t,e,"A",(t-i)/2,(t-i)/2,0,1,t<i?1:0,i,",",a].join(" "),x=t=>{let{width:e=700,height:i=400}=t;return 0===e?null:(0,a.jsx)(f,{data:p,width:e,height:i})},w={nodes:[{id:"Myriel",group:"team1"},{id:"Anne",group:"team1"},{id:"Gabriel",group:"team1"},{id:"Mel",group:"team1"},{id:"Yan",group:"team2"},{id:"Tom",group:"team2"},{id:"Cyril",group:"team2"},{id:"Tuck",group:"team2"},{id:"Antoine",group:"team3"},{id:"Rob",group:"team3"}],links:[{source:"Anne",target:"Myriel",value:1},{source:"Napoleon",target:"Myriel",value:1},{source:"Gabriel",target:"Myriel",value:1},{source:"Mel",target:"Myriel",value:1},{source:"Yan",target:"Tom",value:1},{source:"Tom",target:"Cyril",value:1},{source:"Tuck",target:"Myriel",value:1},{source:"Tuck",target:"Mel",value:1},{source:"Tuck",target:"Myriel",value:1},{source:"Mel",target:"Myriel",value:1},{source:"Rob",target:"Antoine",value:1}]},v=["#e0ac2b","#e85252","#6689c6","#9a6fb0","#a53253"],j={top:10,right:30,bottom:50,left:30},k=t=>{let{width:e,height:i,data:n}=t,o=e-j.right-j.left,r=i-j.top-j.bottom,s=n.nodes.map(t=>t.id),l=[...new Set(n.nodes.map(t=>t.group))],c=g.q2y().range([0,o]).domain(s),d=g.PKp().domain(l).range(v),h=n.nodes.map(t=>(0,a.jsx)("circle",{cx:c(t.id),cy:r,r:8,fill:d(t.group)},t.id));return(0,a.jsx)("div",{children:(0,a.jsx)("svg",{width:e,height:i,children:(0,a.jsx)("g",{width:o,height:r,transform:"translate(".concat([j.left,j.top].join(","),")"),children:h})})})},y=t=>{let{width:e=700,height:i=400}=t;return 0===e?null:(0,a.jsx)(k,{data:w,width:e,height:i})};var A=i(2450);let M=(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("p",{children:["An ",(0,a.jsx)("a",{href:"https://www.data-to-viz.com/graph/arc.html",children:"arc diagram"})," is a special kind of network graph. It is consituted by ",(0,a.jsx)("b",{children:"nodes"})," that represent entities and by ",(0,a.jsx)("b",{children:"links"})," that show relationships between entities. In arc diagrams, nodes are displayed along a ",(0,a.jsx)("b",{children:"single axis"})," ","and links are represented with ",(0,a.jsx)("b",{children:"arcs"}),"."]}),(0,a.jsxs)("p",{children:["This page is a step by step tutorial explaining how to build an Arc diagram component with ",(0,a.jsx)("code",{children:"React"})," and ",(0,a.jsx)("code",{children:"D3.js"}),". It comes with explanations and code sandboxes. It starts by simple concept like how to format the data and how to draw arcs in SVG, and then goes further with hover effect, tooltip and more."]})]});function P(){return(0,a.jsxs)(n.A,{title:"How to build an Arc Diagram with React and D3.",seoDescription:"A step-by-step guide to build your very own Arc diagram from scratch. Comes with explanations, code sandboxes, and ready-to-use templates.",children:[(0,a.jsx)(o.Z,{title:"Arc diagram",description:M,chartType:"arc"}),(0,a.jsx)("h2",{id:"data",children:"The Data"}),(0,a.jsxs)("p",{children:["Two layers of information are required to build an arc diagram: a list of ",(0,a.jsx)("b",{children:"nodes"})," to build the circles and a list of ",(0,a.jsx)("b",{children:"links"})," to build the arcs."]}),(0,a.jsx)("p",{children:"Many different data structures can be used to store such information. In this tutorial I suggest to start with the following:"}),(0,a.jsx)(s.d,{code:S}),(0,a.jsxs)("p",{children:[(0,a.jsx)("code",{children:"data"})," is an object with 2 properties: ",(0,a.jsx)("code",{children:"nodes"})," and"," ",(0,a.jsx)("code",{children:"links"}),"."]}),(0,a.jsxs)("ul",{children:[(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"nodes"})," is an array where each node is an object defined by its ",(0,a.jsx)("code",{children:"id"})," and its ",(0,a.jsx)("code",{children:"group"}),". Note that any other feature can be added to nodes here."]}),(0,a.jsxs)("li",{children:[(0,a.jsx)("code",{children:"links"})," is another array listing the connections. They are defined by a",(0,a.jsx)("code",{children:"source"})," and a ",(0,a.jsx)("code",{children:"target"})," and optionnaly with a ",(0,a.jsx)("code",{children:"value"}),"."]})]}),(0,a.jsx)(h.H,{text:"Explain how to build this data structure from various initial formats"}),(0,a.jsx)("h2",{id:"skeleton",children:"Component skeleton"}),(0,a.jsxs)("p",{children:["The goal here is to create a ",(0,a.jsx)("code",{children:"ArcDiagram"})," component that will be stored in a ",(0,a.jsx)("code",{children:"ArcDiagram.tsx"})," file. This component requires 3 props to render: a ",(0,a.jsx)("code",{children:"width"}),", a ",(0,a.jsx)("code",{children:"height"})," and some"," ",(0,a.jsx)("code",{children:"data"}),"."]}),(0,a.jsxs)("p",{children:["The shape of the ",(0,a.jsx)("code",{children:"data"})," is described above. The"," ",(0,a.jsx)("code",{children:"width"})," and ",(0,a.jsx)("code",{children:"height"})," will be used to render an"," ",(0,a.jsx)("code",{children:"svg"})," element in the DOM, in which we will insert the arc diagram."]}),(0,a.jsxs)("p",{children:["To put it in a nutshell, that's the skeleton of our"," ",(0,a.jsx)("code",{children:"ArcDiagram"})," component:"]}),(0,a.jsx)(s.d,{code:z}),(0,a.jsxs)("p",{children:["It's fundamental to understand that with this code organization, d3.js will be used to prepare the SVG ",(0,a.jsx)("code",{children:"circle"}),", but it's React that will render them in the ",(0,a.jsx)("code",{children:"return()"})," statement. We won't use d3 methods like ",(0,a.jsx)("code",{children:"append"})," that you can find in usual"," ",(0,a.jsx)("a",{href:"https://www.d3-graph-gallery.com",children:"d3.js examples"}),"."]}),(0,a.jsx)("h2",{id:"Nodes",children:"Draw the nodes"}),(0,a.jsxs)("p",{children:["Positionning the nodes relies on a"," ",(0,a.jsx)("a",{href:"https://github.com/d3/d3-scale#scalePoint",children:"point scale"})," ","implement in the ",(0,a.jsx)("code",{children:"scalePoint()"})," function of d3."]}),(0,a.jsxs)("p",{children:["The ",(0,a.jsx)("code",{children:"group"})," property of each node can be used to create an categoric color scale."]}),(0,a.jsxs)("p",{children:["Once the scales are available, it is just a matter of looping through all nodes and render them with several ",(0,a.jsx)("code",{children:"circle"})," SVG elements."]}),(0,a.jsx)(s.d,{code:R}),(0,a.jsx)("p",{children:"Resulting in a few dots being the basis of our ongoing arc diagram \uD83D\uDD25."}),(0,a.jsx)(l.$,{VizComponent:y,vizName:"ArcDiagramNodeOnly",maxWidth:500,height:150,caption:"First step of our ongoing arc diagram: the nodes are displayed at the bottom of the figure."}),(0,a.jsx)("h2",{id:"connections",children:"Draw the connections"}),(0,a.jsxs)("p",{children:["We now have to draw the ",(0,a.jsx)("b",{children:"connections"})," between nodes using"," ",(0,a.jsx)("b",{children:"arcs"}),". All the connections are listed in the ",(0,a.jsx)("b",{children:"links"})," property of the dataset. So it is just a matter of looping through them and draw some SVG for each."]}),(0,a.jsxs)("p",{children:["Drawing an arc in SVG can be done using a ",(0,a.jsx)("code",{children:"path"})," element."," "]}),(0,a.jsxs)("p",{children:[(0,a.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#path_commands",children:"Six types"})," ","of ",(0,a.jsx)("code",{children:"path"})," commands exist. The one we need here is the"," ",(0,a.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/d#elliptical_arc_curve",children:"Elliptical Arc Curve"}),". Its syntax is a bit complicated but here is a function that will get the ",(0,a.jsx)("code",{children:"d"})," attribute of the path we need from the coordinates of 2 points:"]}),(0,a.jsx)(s.d,{code:D}),(0,a.jsxs)("p",{children:["We can call this function for each link and pass the result to a"," ",(0,a.jsx)("code",{children:"path"}),"element. It results in our first basic arc diagram \uD83D\uDE0B"]}),(0,a.jsx)(l.$,{VizComponent:x,vizName:"ArcDiagramBasic",maxWidth:500,height:300,caption:"Add arcs using a custom functionn that draws some elliptical arc curve in SVG."}),(0,a.jsx)(d.r,{chartId:"arc"}),(0,a.jsx)(c.Z,{chartId:"arc"}),(0,a.jsx)("h2",{id:"variations",children:"Variations"}),(0,a.jsxs)("p",{children:["Once you've understood how to build a basic arc diagram with d3 and react, it opens an infinite world of ",(0,a.jsx)("b",{children:"customization"}),". Here are a few examples highlighting what it is possible to do with arc diagrams."]}),(0,a.jsx)("p",{children:"Click on the overview below to get details and code."}),(0,a.jsx)("br",{}),(0,a.jsx)(A.Z,{images:["vertical-arc-diagram.png"]}),(0,a.jsx)("div",{className:"full-bleed border-t h-0 bg-gray-100 mb-3 mt-24"}),(0,a.jsx)(r.Z,{chartFamily:"flow"}),(0,a.jsx)("div",{className:"mt-20"})]})}let S='\nexport const data = {\n  nodes: [\n      { id: "Myriel", group: \'team1\' },\n      { id: "Anne", group: \'team1\' },\n      ...\n  ],\n  links: [\n      { source: "Anne", target: "Myriel", value: 1 },\n      { source: "Napoleon", target: "Myriel", value: 1 },\n      ...\n  ]\n}\n'.trim(),z='\nimport * as d3 from "d3"; // we will need d3.js\n\ntype ArcDiagramProps = {\n  width: number;\n  height: number;\n  data: number[];\n};\n\nexport const ArcDiagram = ({ width, height, data }: ArcDiagramProps) => {\n\n  // read the data\n  // compute the nodes position\n  // build the arcs\n\n  return (\n    <div>\n      <svg width={width} height={height}>\n        // render all the arcs and circles\n      </svg>\n    </div>\n  );\n};\n'.trim(),R="\nconst xScale = d3.scalePoint().range([0, boundsWidth]).domain(allNodeNames);\n\nconst colorScale = d3\n  .scaleOrdinal<string>()\n  .domain(allNodeGroups)\n  .range(COLORS);\n\nconst allNodes = data.nodes.map((node) => {\n  return (\n    <circle\n      key={node.id}\n      cx={xScale(node.id)}\n      cy={boundsHeight}\n      r={8}\n      fill={colorScale(node.group)}\n    />\n  );\n});\n".trim(),D='\nconst horizontalArcGenerator = (\n  xStart,\n  yStart,\n  xEnd,\n  yEnd\n) => {\n  return [\n    // the arc starts at the coordinate xStart, xEnd\n    "M",\n    xStart,\n    yStart,\n\n    // A means we\'re gonna build an Elliptical Arc Curve\n    "A",\n    (xStart - xEnd) / 2,    // rx: first radii of the ellipse (inflexion point)\n    (xStart - xEnd) / 2,    // ry: second radii of the ellipse  (inflexion point)\n    0,                      // angle: rotation (in degrees) of the ellipse relative to the x-axis\n    1,                      // large-arc-flag: large arc (1) or small arc (0)\n    xStart < xEnd ? 1 : 0,  // sweep-flag: the clockwise turning arc (1) or counterclockwise turning arc (0)\n\n    // Position of the end of the arc\n    xEnd,\n    ",",\n    yEnd,\n  ].join(" ");\n};\n'.trim()},2050:function(t,e,i){"use strict";i.d(e,{F:function(){return a}});let a=[{link:"/scatter-plot#scales%20and%20axes",title:"Scales and axes",description:"How to map your data in a 2d space, and how to draw the axes",img:"axis-basic-demo.png",alt:"Picture of an empty chart area with X and Y axes"},{link:"/scatterplot",title:"Scatterplot Hover effect",description:"How to add a hover effect to highlight a group on a scatterplot",img:"scatterplotHoverEffect.gif",alt:"GIF of a scatterplot with hover effect"},{link:"/scatter-plot#circles",title:"Basic scatter plot",description:"Add circles to get a basic scatter plot",img:"scatterplot-most-basic.png",alt:"Most basic scatterplot made with react and d3"},{link:"/scatter-plot#tooltip",title:"Add tooltip",description:"Get more details about each datapoint by adding a tooltip on hover",img:"scatterplot-tooltip.png",alt:"Scatterplot with tooltip made with react and d3"},{link:"/scatter-plot#hover%20effect",title:"Add a hover effect",description:"Highlight a specific group on hover",img:"scatterplot-hover-effect.png",alt:"Scatterplot with hover effect made with react and d3"},{link:"/scatter-plot#real%20life",title:"Real life use-case",description:"Reproduction of a data wrapper chart representing countries CO2 data",img:"scatterplot-co2.png",alt:"Real life example of a scatterplot made with react and d3"},{link:"/example/scatterplot-tooltip-with-voronoi-for-closest-point-detection",title:"Closest point detection with Voronoi",description:"Using a voronoi diagram in the scatterplot background is a smart way to efficiently find the mouse closest point",img:"scatterplot-tooltip-with-voronoi-for-closest-point-detection.gif",alt:"gif of a scatterplot with voronoi diagram for closest point detection"},{link:"/example/scatterplot-basic-canvas",title:"Scatterplot in Canvas",description:"Learn how to render a scatterplot in canvas to improve performances",img:"scatterplot-basic-canvas.png",alt:"a scatterplot made with react and rendered in canvas"},{link:"/heatmap",title:"Basic heatmap",description:"Most basic heatmap",img:"heatmapBasic.png",alt:"Picture of a simple heatmap made with react and d3.js"},{link:"/heatmap#tooltip",title:"Heatmap with tooltip",description:"Learn how to add a tooltip to a heatmap with react",img:"heatmapTooltip.png",alt:"Picture of a heatmap with a tooltip that appears on hover"},{link:"/heatmap#legend",title:"Continuous color scale",description:"How to add a color legend to your chart that uses a continuous color scale",img:"continuousColorLegend.png",alt:"Picture of a continuous color scale built with d3.js"},{link:"/heatmap#application",title:"Vaccination heatmap",description:"Reproduction of a famous vaccination heatmap using d3 and react",img:"heatmapVaccination.png",alt:"Picture of a heatmap showing the effect of vaccination, built with react and d3"},{link:"/correlogram",title:"Basic correlogram",description:"Learn how to build a correlogram with react and d3",img:"correlogramBasic.png",alt:"Picture of a correlogram built with react and d3"},{link:"/bubble-plot",title:"Bubble plot",description:"Learn how to build a bubble plot with react and d3.js",img:"bubble-plot-with-legend.png",alt:"Picture of a simple bubble plot with a legend made with react and d3.js"},{link:"/bubble-plot#transition",title:"Bubble plot data set transition",description:"How to smoothly animate the transition between dataset",img:"bubble-plot-dataset-transition.gif",alt:"GIF of a bubble plot smoothly transitioning data"},{link:"/2d-density-plot",title:"Hexbin chart",description:"A hexbin chart split the figure in hexagons to show a 2d density",img:"2d-density-plot.png",alt:"Picture of a hexbin chart made with React and d3.js"},{link:"/connected-scatter-plot",title:"Simple connected scatterplot",description:"A very simple connected scatter plot showing the evolution of 1 numeric variable",img:"connected-scatterplot-basic.png",alt:"Picture of a connected scatter plot made with React and d3.js"},{link:"/example/boxplot-jitter",title:"Boxplot with jitter",description:"Add individual data points using jitter on top of the boxplot",img:"boxplot-jitter.png",alt:"Picture of a boxplot with jitter built using react and d3.js"},{link:"/boxplot#box%20component",title:"Boxplot shape",description:"How to build a boxplot shape in SVG",img:"boxplotShape.png",alt:"Picture of a box component, allowing to build a boxplot later on"},{link:"/boxplot",title:"Basic boxplot",description:"How to build a basic boxplot with react",img:"boxplotBasic.png",alt:"Picture of a basic boxplot built with react and d3"},{link:"/example/boxplot-horizontal",title:"Horizontal boxplot",description:"How to build a horizontal boxplot with react",img:"boxplot-horizontal.png",alt:"Picture of a horizontal boxplot built with react and d3"},{link:"/histogram",title:"Histogram",description:"Learn how to build a histogram with react and d3.js",img:"histogram-basic.png",alt:"Picture of a simple histogram made with react and d3.js"},{link:"/histogram#transition",title:"Histogram dataset transition",description:"How to animate the transition between datasets",img:"histogram-dataset-transition.gif",alt:"GIF of a histogram with animated data transition"},{link:"/example/histogram-mirror",title:"Mirror histogram",description:"Create a mirror histogram to compare the distribution of 2 groups in a dataset",img:"histogram-mirror.png",alt:"picture of a mirror histogram made with react and d3.js"},{link:"/example/histogram-small-multiple",title:"Small multiple",description:"Create one panel per group to show its distribution separately",img:"histogram-small-multiple.png",alt:"Picture of a histogram with small multiple built with react and d3.js"},{link:"/example/histogram-with-several-groups",title:"Multiple groups",description:"A histogram with <b>multiple</b> groups displayed on the same axis.",img:"histogram-with-several-groups.png",alt:"Picture of a histogram with multiple groups built with react and d3.js"},{link:"/violin-plot",title:"Violin to Boxplot transition",description:"Using shape morphism to smoothly transition from a boxplot to a violin and reverse",img:"violinBoxplotTransition.png",alt:"gif of a violin plot smoothly transitioning to a boxplot using shape morphism"},{link:"/violin-plot#bucket%20size",title:"Bucket size effect",description:"Interactive example showing the bucket size effect on a violin chart",img:"violin-bucket-size-effect.gif",alt:"GIF showing a violin plot with varying bucket size"},{link:"/violin-plot#violin%20component",title:"Violin shape",description:"How to build the shape of a violin with SVG",img:"violinShape.png",alt:"Picture of a violin shape built with react and d3"},{link:"/violin-plot",title:"Boxplot to Violin plot",description:"Interactive example showing the difference between a boxplot and a violin",img:"boxplot-violin-transition.gif",alt:"GIF showing a mirror transition between a boxplot and a violin plot"},{link:"/violin-plot",title:"Basic violin plot",description:"Learn how to build a basic violin chart with d3 and react",img:"violinBasic.png",alt:"Picture of a basic violin chart built in react"},{link:"/violin-plot#bucket%20size",title:"Violin with variable bucket size",description:"A violin plot with a slider to change the bucket size in use",img:"violinBucketSize.png",alt:"Picture of a violin plot with variable bucket size"},{link:"/barplot",title:"Basic barplot",description:"Most basic barplot built with React and d3",img:"barplot-basic.png",alt:"Picture of a horizontal barplot made with React and d3"},{link:"/example/barplot-data-transition-animation",title:"Barplot dataset transition",description:"How to smoothly animate the transition between dataset",img:"barplotDatasetAnimation.gif",alt:"GIF of a data update on a React barplot"},{link:"/example/barplot-stacked-horizontal",title:"Horizontal Stacked Barplot",description:"Represent group and subgroup values by stacking the data",img:"barplot-stacked-horizontal.png",alt:"Picture of a stacked barchart made with react and d3"},{link:"/example/barplot-stacked-vertical",title:"Vertical Stacked Barplot",description:"Represent group and subgroup values by stacking the data",img:"barplot-stacked-vertical.png",alt:"Picture of a vertical stacked barchart made with react and d3"},{link:"/density-plot",title:"Basic density plot",description:"Most basic density plot built with React and d3",img:"densityBasic.png",alt:"Picture of a basic density plot built with React and d3"},{link:"/density-plot#variations",title:"Density plot with multiple groups",description:"How to add several groups on the same density plot",img:"densityMultipleGroups.png",alt:"Picture of a density plot with multiple groups"},{link:"/ridgeline",title:"Basic ridgeline chart",description:"Most basic version of a ridgeline plot",img:"ridgelineBasic.png",alt:"Picture of a basic ridgeline chart built with react and d3"},{link:"/line-chart#basic",title:"Most basic line chart",description:"The most basic line chart one can make using d3 and react",img:"line-chart-basic.png",alt:"Picture of a very simple line chart made with react and d3"},{link:"/line-chart#transition",title:"Line chart with dataset transition",description:"How to smoothly animate the transition between 2 dataset on a line chart",img:"line-chart-data-transition.gif",alt:"GIF of a line chart that animates between 2 dataset"},{link:"/area-plot",title:"Basic Area Chart",description:"Most basic version of an area chart made with react and d3.js",img:"area-chart-basic.png",alt:"Picture of a basic area chart made with React and D3"},{link:"/stacked-area-plot",title:"Basis stacked area chart",description:"Most basic version of a stacked area chart. Explains how to use the stack() function of d3.js",img:"stacked-area-plot-basic.png",alt:"picture of a basic stacked area plot made with react"},{link:"/streamchart",title:"Basic Streamgraph",description:"Most basic streamgraph one can build using d3 and react",img:"streamgraph-basic.png",alt:"Picture of a basic streamgraph made using Reacrt and d3.js"},{link:"/streamchart#hover&effect",title:"Streamgraph with hover effect",description:"How to add a hover effect on a streamgraph to highlight a group",img:"streamgraph-hover-effect.gif",alt:"GIF of a streamgraph react component that supports hover effect"},{link:"/streamchart#transition",title:"Offset and Smoothing transition",description:"An interactive streamgraph example showing how to animate transition between the chart stacking features.",img:"streamgraph-offset-type-transition.gif",alt:"GIF of a streamgraph"},{link:"/streamchart#application",title:"Streamgraph application",description:"Streamgraph with a slider to zoom on a time stamp and with interactive inline legends",img:"streamgraph-application.gif",alt:"GIF of a streamgraph with multiple interactive features"},{link:"/circular-packing",title:"Most basic circular packing chart",description:"The most basic circular packing chart one can make using d3.js and React.",img:"circle-pack-basic.png",alt:"Picture of a very basic circle packing chart"},{link:"/circular-packing",title:"Circular packing: 2 levels of hierarchy",description:"A simple circular packing chart with 2 levels of hierarchy built with React and d3.",img:"circle-pack-2-levels.png",alt:"Picture of a very basic circle packing chart with 2 levels of hierarchy"},{link:"/example/circle-packing-with-d3-force",title:"Circle Pack with d3-force",description:"Another approach to build a circle packing chart using physical forces to compute node positions.",img:"circle-pack-d3-force.png",alt:"Picture of a circle packing chart made using the d3-force plugin"},{link:"/example/arc-diagram-vertical",title:"Vertical arc diagram",description:"The vertical version of the arc diagram is more convenient to display labels",img:"vertical-arc-diagram.png",alt:"Picture of a vertical arc diagram"},{link:"/network-chart#rendering",title:"Most basic network chart",description:"Most basic network chart using the d3-force plugin to apply physical forces.",img:"network-chart-basic.png",alt:"Picture of a very simple network chart built with React and D3.js."},{link:"/network-chart#rendering",title:"Play with forces",description:"A playground to discover the effect of the various forces you can apply to your particles",img:"network-chart-force-playground.png",alt:"Picture of a playground allowing to play with the various d3 forces"},{link:"/example/network-diagram-with-colored-groups",title:"Force directed graph",description:"A force directed network chart showing character co-occurence in les miserables",img:"network-les-miserables.png",alt:"Picture of a force directed network chart showing character co-occurence in les miserables"}]},6395:function(t){t.exports={container:"graphLinkImage_container__vhwty",title:"graphLinkImage_title__zwMK0"}}},function(t){t.O(0,[3996,7875,5660,645,1188,9774,2888,179],function(){return t(t.s=8930)}),_N_E=t.O()}]);