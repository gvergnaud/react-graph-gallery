(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9342],{37618:function(t,e,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/example/barplot-data-transition-animation",function(){return n(31917)}])},31917:function(t,e,n){"use strict";n.r(e),n.d(e,{default:function(){return u}});var i=n(85893);n(67294);var a=n(80153),r=n(43710),s=n(61651),o=n(3572),h=n(81122),d=n(41664),l=n.n(d),p=n(46228);let c=(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)("p",{children:["This tutorial is a variation around the general"," ",(0,i.jsx)(l(),{href:"/barplot",children:"introduction to barplot with react"})," and d3.js. You should probably understand the concepts described there before digging into ",(0,i.jsx)("b",{children:"animation"}),"."]}),(0,i.jsxs)("p",{children:["This example focus on how to transition between datasets. It explains how to animate the change thanks to the"," ",(0,i.jsx)("a",{href:"https://www.react-spring.dev/",children:"react-spring"})," library."]}),(0,i.jsx)("p",{children:"A code sandbox is provided for the final result, but explanations target what's different compared to an usual barplot."})]});function u(){return(0,i.jsxs)(a.A,{title:"Barplot with smooth dataset transition.",seoDescription:"A step-by-step guide to build your barplot with smooth data transition component. Comes with explanations, code sandboxes, and ready-to-use templates.",children:[(0,i.jsx)(r.Z,{title:(0,i.jsxs)("h1",{children:["Barplot"," ",(0,i.jsx)("span",{className:"text-gray-600 font-light hidden sm:inline",children:"with animated dataset transition"})]}),description:c,chartType:"barplot"}),(0,i.jsx)("h2",{id:"plot",children:"Plot and code"}),(0,i.jsxs)("p",{children:["If you are in a hurry, this is what we're trying to achieve here \uD83D\uDE47‍♂️. The value of ",(0,i.jsx)("b",{children:"several individuals"})," is represented, with one bar per individual. It's just a ",(0,i.jsx)(l(),{href:"barplot",children:" horizontal barplot"}),"."]}),(0,i.jsx)("p",{children:"It is possible to switch from one dataset to another using the buttons above the chart. A few notes on the 3 usual animation patterns:"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"update"}),": bars smoothly update their rank and size when the data changes. So does their label."]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"enter"}),": when the chart first loads, bar starts from 0 and grows to its real size. This is also true for items that are available in the new dataset but not in the previous. Check ",(0,i.jsx)("code",{children:"Christophe"})," ","when you switch to data 2."]}),(0,i.jsxs)("li",{children:[(0,i.jsx)("b",{children:"exit"}),": when an item is not available in the next dataset, it disappears with no animation (see ",(0,i.jsx)("code",{children:"Paul"})," when switching to data2)."]})]}),(0,i.jsx)(h.$,{vizName:"BarplotDatasetTransition",VizComponent:p.P,height:400,maxWidth:600,caption:"Barplot with smooth transition between dataset"}),(0,i.jsx)("h2",{id:"data",children:"The Data"}),(0,i.jsxs)("p",{children:["The dataset used here is exactly the same as the one used for the"," ",(0,i.jsx)(l(),{href:"/barplot#data",children:"simple barplot"}),". Note that 2 similar datasets are used: ",(0,i.jsx)("code",{children:"data1"})," and ",(0,i.jsx)("code",{children:"data2"}),"."]}),(0,i.jsx)("h2",{id:"animation",children:"Animation"}),(0,i.jsxs)("p",{children:["Most of the code is similar to the basic"," ",(0,i.jsx)(l(),{href:"/barplot#basic&20barplot",children:"barplot component"}),". But instead of building one ",(0,i.jsx)("code",{children:"rect"})," per item in the dataset, a"," ",(0,i.jsx)("code",{children:"BarItem"})," component is called to render a rectangle that supports animation."]}),(0,i.jsxs)("p",{children:["The ",(0,i.jsx)(l(),{href:"https://www.react-spring.dev/",children:"react-spring"})," ","library is used to create a ",(0,i.jsx)("b",{children:"spring"})," animation. The rectangle properties are passed to a ",(0,i.jsx)("code",{children:"useSpring"})," hook that will build the animation for us."]}),(0,i.jsxs)("p",{children:["This is how the ",(0,i.jsx)("code",{children:"BarItem"})," component looks like:"]}),(0,i.jsx)(o.d,{code:m}),(0,i.jsx)("div",{className:"full-bleed border-t h-0 bg-gray-100 mb-3 mt-24"}),(0,i.jsx)(s.Z,{chartFamily:"ranking"}),(0,i.jsx)("div",{className:"mt-20"})]})}let m='\nimport { useSpring, animated } from "@react-spring/web";\n\ntype BarItemProps = {\n  name: string;\n  value: number;\n  barHeight: number;\n  barWidth: number;\n  x: number;\n  y: number;\n};\n\ntype AnimatedProps = {\n  barWidth: number;\n  value: number;\n  valueOpacity: number;\n  y: number;\n};\n\nexport const BarItem = (props: BarItemProps) => {\n  const { name, value, barHeight, barWidth, x, y } = props;\n\n  const springProps = useSpring<AnimatedProps>({\n    // the \'from\' properties will be used only to animate the initialization of the component\n    // if you put nothing it will be initialized with the first prop that is provided\n    from: {\n      value: 0,\n      barWidth: 0,\n      valueOpacity: 0,\n    },\n    to: {\n      value: value,\n      barWidth: barWidth,\n      valueOpacity: barWidth > 80 ? 1 : 0,\n      y,\n    },\n    config: {\n      friction: 100,\n    },\n  });\n\n  return (\n    <g>\n      <animated.rect\n        x={x}\n        y={springProps.y}\n        width={springProps.barWidth}\n        height={barHeight}\n        opacity={0.7}\n        stroke="#9d174d"\n        fill="#9d174d"\n        fillOpacity={0.3}\n        strokeWidth={1}\n        rx={1}\n      />\n      <animated.text\n        x={springProps.barWidth?.to((width) => width - 7)}\n        y={springProps.y?.to((y) => y + barHeight / 2)}\n        textAnchor="end"\n        alignmentBaseline="central"\n        fontSize={12}\n        opacity={springProps.valueOpacity}\n      >\n        {springProps.value?.to((value) => value.toFixed(0))}\n      </animated.text>\n      <animated.text\n        x={x + 7}\n        y={springProps.y?.to((y) => y + barHeight / 2)}\n        textAnchor="start"\n        alignmentBaseline="central"\n        fontSize={12}\n      >\n        {name}\n      </animated.text>\n    </g>\n  );\n};\n'.trim()}},function(t){t.O(0,[2343,7754,3950,7823,2719,8190,3710,2594,4369,9774,2888,179],function(){return t(t.s=37618)}),_N_E=t.O()}]);